ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"usbd_storage_if.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.STORAGE_Init_FS,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	STORAGE_Init_FS:
  26              	.LVL0:
  27              	.LFB134:
  28              		.file 1 "Src/usbd_storage_if.c"
   1:Src/usbd_storage_if.c **** /* USER CODE BEGIN Header */
   2:Src/usbd_storage_if.c **** /**
   3:Src/usbd_storage_if.c ****   ******************************************************************************
   4:Src/usbd_storage_if.c ****   * @file           : usbd_storage_if.c
   5:Src/usbd_storage_if.c ****   * @version        : v1.0_Cube
   6:Src/usbd_storage_if.c ****   * @brief          : Memory management layer.
   7:Src/usbd_storage_if.c ****   ******************************************************************************
   8:Src/usbd_storage_if.c ****   * @attention
   9:Src/usbd_storage_if.c ****   *
  10:Src/usbd_storage_if.c ****   * Copyright (c) 2022 STMicroelectronics.
  11:Src/usbd_storage_if.c ****   * All rights reserved.
  12:Src/usbd_storage_if.c ****   *
  13:Src/usbd_storage_if.c ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Src/usbd_storage_if.c ****   * in the root directory of this software component.
  15:Src/usbd_storage_if.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Src/usbd_storage_if.c ****   *
  17:Src/usbd_storage_if.c ****   ******************************************************************************
  18:Src/usbd_storage_if.c ****   */
  19:Src/usbd_storage_if.c **** /* USER CODE END Header */
  20:Src/usbd_storage_if.c **** 
  21:Src/usbd_storage_if.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/usbd_storage_if.c **** #include "usbd_storage_if.h"
  23:Src/usbd_storage_if.c **** 
  24:Src/usbd_storage_if.c **** /* USER CODE BEGIN INCLUDE */
  25:Src/usbd_storage_if.c **** 
  26:Src/usbd_storage_if.c **** /* USER CODE END INCLUDE */
  27:Src/usbd_storage_if.c **** 
  28:Src/usbd_storage_if.c **** /* Private typedef -----------------------------------------------------------*/
  29:Src/usbd_storage_if.c **** /* Private define ------------------------------------------------------------*/
  30:Src/usbd_storage_if.c **** /* Private macro -------------------------------------------------------------*/
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s 			page 2


  31:Src/usbd_storage_if.c **** 
  32:Src/usbd_storage_if.c **** /* USER CODE BEGIN PV */
  33:Src/usbd_storage_if.c **** /* Private variables ---------------------------------------------------------*/
  34:Src/usbd_storage_if.c **** 
  35:Src/usbd_storage_if.c **** /* USER CODE END PV */
  36:Src/usbd_storage_if.c **** 
  37:Src/usbd_storage_if.c **** /** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
  38:Src/usbd_storage_if.c ****   * @brief Usb device.
  39:Src/usbd_storage_if.c ****   * @{
  40:Src/usbd_storage_if.c ****   */
  41:Src/usbd_storage_if.c **** 
  42:Src/usbd_storage_if.c **** /** @defgroup USBD_STORAGE
  43:Src/usbd_storage_if.c ****   * @brief Usb mass storage device module
  44:Src/usbd_storage_if.c ****   * @{
  45:Src/usbd_storage_if.c ****   */
  46:Src/usbd_storage_if.c **** 
  47:Src/usbd_storage_if.c **** /** @defgroup USBD_STORAGE_Private_TypesDefinitions
  48:Src/usbd_storage_if.c ****   * @brief Private types.
  49:Src/usbd_storage_if.c ****   * @{
  50:Src/usbd_storage_if.c ****   */
  51:Src/usbd_storage_if.c **** 
  52:Src/usbd_storage_if.c **** /* USER CODE BEGIN PRIVATE_TYPES */
  53:Src/usbd_storage_if.c **** 
  54:Src/usbd_storage_if.c **** /* USER CODE END PRIVATE_TYPES */
  55:Src/usbd_storage_if.c **** 
  56:Src/usbd_storage_if.c **** /**
  57:Src/usbd_storage_if.c ****   * @}
  58:Src/usbd_storage_if.c ****   */
  59:Src/usbd_storage_if.c **** 
  60:Src/usbd_storage_if.c **** /** @defgroup USBD_STORAGE_Private_Defines
  61:Src/usbd_storage_if.c ****   * @brief Private defines.
  62:Src/usbd_storage_if.c ****   * @{
  63:Src/usbd_storage_if.c ****   */
  64:Src/usbd_storage_if.c **** 
  65:Src/usbd_storage_if.c **** #define STORAGE_LUN_NBR                  1
  66:Src/usbd_storage_if.c **** #define STORAGE_BLK_NBR                  0x10000
  67:Src/usbd_storage_if.c **** #define STORAGE_BLK_SIZ                  0x200
  68:Src/usbd_storage_if.c **** 
  69:Src/usbd_storage_if.c **** /* USER CODE BEGIN PRIVATE_DEFINES */
  70:Src/usbd_storage_if.c **** 
  71:Src/usbd_storage_if.c **** /* USER CODE END PRIVATE_DEFINES */
  72:Src/usbd_storage_if.c **** 
  73:Src/usbd_storage_if.c **** /**
  74:Src/usbd_storage_if.c ****   * @}
  75:Src/usbd_storage_if.c ****   */
  76:Src/usbd_storage_if.c **** 
  77:Src/usbd_storage_if.c **** /** @defgroup USBD_STORAGE_Private_Macros
  78:Src/usbd_storage_if.c ****   * @brief Private macros.
  79:Src/usbd_storage_if.c ****   * @{
  80:Src/usbd_storage_if.c ****   */
  81:Src/usbd_storage_if.c **** 
  82:Src/usbd_storage_if.c **** /* USER CODE BEGIN PRIVATE_MACRO */
  83:Src/usbd_storage_if.c **** 
  84:Src/usbd_storage_if.c **** /* USER CODE END PRIVATE_MACRO */
  85:Src/usbd_storage_if.c **** 
  86:Src/usbd_storage_if.c **** /**
  87:Src/usbd_storage_if.c ****   * @}
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s 			page 3


  88:Src/usbd_storage_if.c ****   */
  89:Src/usbd_storage_if.c **** 
  90:Src/usbd_storage_if.c **** /** @defgroup USBD_STORAGE_Private_Variables
  91:Src/usbd_storage_if.c ****   * @brief Private variables.
  92:Src/usbd_storage_if.c ****   * @{
  93:Src/usbd_storage_if.c ****   */
  94:Src/usbd_storage_if.c **** 
  95:Src/usbd_storage_if.c **** /* USER CODE BEGIN INQUIRY_DATA_FS */
  96:Src/usbd_storage_if.c **** /** USB Mass storage Standard Inquiry Data. */
  97:Src/usbd_storage_if.c **** const int8_t STORAGE_Inquirydata_FS[] = {/* 36 */
  98:Src/usbd_storage_if.c **** 
  99:Src/usbd_storage_if.c ****   /* LUN 0 */
 100:Src/usbd_storage_if.c ****   0x00,
 101:Src/usbd_storage_if.c ****   0x80,
 102:Src/usbd_storage_if.c ****   0x02,
 103:Src/usbd_storage_if.c ****   0x02,
 104:Src/usbd_storage_if.c ****   (STANDARD_INQUIRY_DATA_LEN - 5),
 105:Src/usbd_storage_if.c ****   0x00,
 106:Src/usbd_storage_if.c ****   0x00,
 107:Src/usbd_storage_if.c ****   0x00,
 108:Src/usbd_storage_if.c ****   'S', 'T', 'M', ' ', ' ', ' ', ' ', ' ', /* Manufacturer : 8 bytes */
 109:Src/usbd_storage_if.c ****   'P', 'r', 'o', 'd', 'u', 'c', 't', ' ', /* Product      : 16 Bytes */
 110:Src/usbd_storage_if.c ****   ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
 111:Src/usbd_storage_if.c ****   '0', '.', '0' ,'1'                      /* Version      : 4 Bytes */
 112:Src/usbd_storage_if.c **** };
 113:Src/usbd_storage_if.c **** /* USER CODE END INQUIRY_DATA_FS */
 114:Src/usbd_storage_if.c **** 
 115:Src/usbd_storage_if.c **** /* USER CODE BEGIN PRIVATE_VARIABLES */
 116:Src/usbd_storage_if.c **** 
 117:Src/usbd_storage_if.c **** /* USER CODE END PRIVATE_VARIABLES */
 118:Src/usbd_storage_if.c **** 
 119:Src/usbd_storage_if.c **** /**
 120:Src/usbd_storage_if.c ****   * @}
 121:Src/usbd_storage_if.c ****   */
 122:Src/usbd_storage_if.c **** 
 123:Src/usbd_storage_if.c **** /** @defgroup USBD_STORAGE_Exported_Variables
 124:Src/usbd_storage_if.c ****   * @brief Public variables.
 125:Src/usbd_storage_if.c ****   * @{
 126:Src/usbd_storage_if.c ****   */
 127:Src/usbd_storage_if.c **** 
 128:Src/usbd_storage_if.c **** extern USBD_HandleTypeDef hUsbDeviceFS;
 129:Src/usbd_storage_if.c **** 
 130:Src/usbd_storage_if.c **** /* USER CODE BEGIN EXPORTED_VARIABLES */
 131:Src/usbd_storage_if.c **** 
 132:Src/usbd_storage_if.c **** /* USER CODE END EXPORTED_VARIABLES */
 133:Src/usbd_storage_if.c **** 
 134:Src/usbd_storage_if.c **** /**
 135:Src/usbd_storage_if.c ****   * @}
 136:Src/usbd_storage_if.c ****   */
 137:Src/usbd_storage_if.c **** 
 138:Src/usbd_storage_if.c **** /** @defgroup USBD_STORAGE_Private_FunctionPrototypes
 139:Src/usbd_storage_if.c ****   * @brief Private functions declaration.
 140:Src/usbd_storage_if.c ****   * @{
 141:Src/usbd_storage_if.c ****   */
 142:Src/usbd_storage_if.c **** 
 143:Src/usbd_storage_if.c **** static int8_t STORAGE_Init_FS(uint8_t lun);
 144:Src/usbd_storage_if.c **** static int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size);
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s 			page 4


 145:Src/usbd_storage_if.c **** static int8_t STORAGE_IsReady_FS(uint8_t lun);
 146:Src/usbd_storage_if.c **** static int8_t STORAGE_IsWriteProtected_FS(uint8_t lun);
 147:Src/usbd_storage_if.c **** static int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len);
 148:Src/usbd_storage_if.c **** static int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len);
 149:Src/usbd_storage_if.c **** static int8_t STORAGE_GetMaxLun_FS(void);
 150:Src/usbd_storage_if.c **** 
 151:Src/usbd_storage_if.c **** /* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
 152:Src/usbd_storage_if.c **** 
 153:Src/usbd_storage_if.c **** /* USER CODE END PRIVATE_FUNCTIONS_DECLARATION */
 154:Src/usbd_storage_if.c **** 
 155:Src/usbd_storage_if.c **** /**
 156:Src/usbd_storage_if.c ****   * @}
 157:Src/usbd_storage_if.c ****   */
 158:Src/usbd_storage_if.c **** 
 159:Src/usbd_storage_if.c **** USBD_StorageTypeDef USBD_Storage_Interface_fops_FS =
 160:Src/usbd_storage_if.c **** {
 161:Src/usbd_storage_if.c ****   STORAGE_Init_FS,
 162:Src/usbd_storage_if.c ****   STORAGE_GetCapacity_FS,
 163:Src/usbd_storage_if.c ****   STORAGE_IsReady_FS,
 164:Src/usbd_storage_if.c ****   STORAGE_IsWriteProtected_FS,
 165:Src/usbd_storage_if.c ****   STORAGE_Read_FS,
 166:Src/usbd_storage_if.c ****   STORAGE_Write_FS,
 167:Src/usbd_storage_if.c ****   STORAGE_GetMaxLun_FS,
 168:Src/usbd_storage_if.c ****   (int8_t *)STORAGE_Inquirydata_FS
 169:Src/usbd_storage_if.c **** };
 170:Src/usbd_storage_if.c **** 
 171:Src/usbd_storage_if.c **** /* Private functions ---------------------------------------------------------*/
 172:Src/usbd_storage_if.c **** /**
 173:Src/usbd_storage_if.c ****   * @brief  Initializes the storage unit (medium) over USB FS IP
 174:Src/usbd_storage_if.c ****   * @param  lun: Logical unit number.
 175:Src/usbd_storage_if.c ****   * @retval USBD_OK if all operations are OK else USBD_FAIL
 176:Src/usbd_storage_if.c ****   */
 177:Src/usbd_storage_if.c **** int8_t STORAGE_Init_FS(uint8_t lun)
 178:Src/usbd_storage_if.c **** {
  29              		.loc 1 178 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 179:Src/usbd_storage_if.c ****   /* USER CODE BEGIN 2 */
 180:Src/usbd_storage_if.c ****  UNUSED(lun);
  34              		.loc 1 180 2 view .LVU1
 181:Src/usbd_storage_if.c ****  //printf("STORAGE_Init_FS \r\n");
 182:Src/usbd_storage_if.c ****   return (USBD_OK);
  35              		.loc 1 182 3 view .LVU2
 183:Src/usbd_storage_if.c ****   /* USER CODE END 2 */
 184:Src/usbd_storage_if.c **** }
  36              		.loc 1 184 1 is_stmt 0 view .LVU3
  37 0000 0020     		movs	r0, #0
  38              	.LVL1:
  39              		.loc 1 184 1 view .LVU4
  40 0002 7047     		bx	lr
  41              		.cfi_endproc
  42              	.LFE134:
  44              		.section	.text.STORAGE_GetCapacity_FS,"ax",%progbits
  45              		.align	1
  46              		.syntax unified
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s 			page 5


  47              		.thumb
  48              		.thumb_func
  50              	STORAGE_GetCapacity_FS:
  51              	.LVL2:
  52              	.LFB135:
 185:Src/usbd_storage_if.c **** 
 186:Src/usbd_storage_if.c **** /**
 187:Src/usbd_storage_if.c ****   * @brief  Returns the medium capacity.
 188:Src/usbd_storage_if.c ****   * @param  lun: Logical unit number.
 189:Src/usbd_storage_if.c ****   * @param  block_num: Number of total block number.
 190:Src/usbd_storage_if.c ****   * @param  block_size: Block size.
 191:Src/usbd_storage_if.c ****   * @retval USBD_OK if all operations are OK else USBD_FAIL
 192:Src/usbd_storage_if.c ****   */
 193:Src/usbd_storage_if.c **** int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
 194:Src/usbd_storage_if.c **** {
  53              		.loc 1 194 1 is_stmt 1 view -0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
 195:Src/usbd_storage_if.c ****   /* USER CODE BEGIN 3 */
 196:Src/usbd_storage_if.c ****   UNUSED(lun);
  58              		.loc 1 196 3 view .LVU6
 197:Src/usbd_storage_if.c ****   //printf("STORAGE_GetCapacity_FS \r\n");
 198:Src/usbd_storage_if.c ****   *block_num  = STORAGE_BLK_NBR;
  59              		.loc 1 198 3 view .LVU7
  60              		.loc 1 198 15 is_stmt 0 view .LVU8
  61 0000 4FF48033 		mov	r3, #65536
  62 0004 0B60     		str	r3, [r1]
 199:Src/usbd_storage_if.c ****   *block_size = STORAGE_BLK_SIZ;
  63              		.loc 1 199 3 is_stmt 1 view .LVU9
  64              		.loc 1 199 15 is_stmt 0 view .LVU10
  65 0006 4FF40073 		mov	r3, #512
  66 000a 1380     		strh	r3, [r2]	@ movhi
 200:Src/usbd_storage_if.c ****    //printf("%s : %d\r\n",__FUNCTION__,__LINE__);
 201:Src/usbd_storage_if.c ****   return (USBD_OK);
  67              		.loc 1 201 3 is_stmt 1 view .LVU11
 202:Src/usbd_storage_if.c ****   /* USER CODE END 3 */
 203:Src/usbd_storage_if.c **** }
  68              		.loc 1 203 1 is_stmt 0 view .LVU12
  69 000c 0020     		movs	r0, #0
  70              	.LVL3:
  71              		.loc 1 203 1 view .LVU13
  72 000e 7047     		bx	lr
  73              		.cfi_endproc
  74              	.LFE135:
  76              		.section	.text.STORAGE_IsReady_FS,"ax",%progbits
  77              		.align	1
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
  82              	STORAGE_IsReady_FS:
  83              	.LVL4:
  84              	.LFB136:
 204:Src/usbd_storage_if.c **** 
 205:Src/usbd_storage_if.c **** /**
 206:Src/usbd_storage_if.c ****   * @brief   Checks whether the medium is ready.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s 			page 6


 207:Src/usbd_storage_if.c ****   * @param  lun:  Logical unit number.
 208:Src/usbd_storage_if.c ****   * @retval USBD_OK if all operations are OK else USBD_FAIL
 209:Src/usbd_storage_if.c ****   */
 210:Src/usbd_storage_if.c **** int8_t STORAGE_IsReady_FS(uint8_t lun)
 211:Src/usbd_storage_if.c **** {
  85              		.loc 1 211 1 is_stmt 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		@ link register save eliminated.
 212:Src/usbd_storage_if.c ****   /* USER CODE BEGIN 4 */
 213:Src/usbd_storage_if.c ****   UNUSED(lun);
  90              		.loc 1 213 3 view .LVU15
 214:Src/usbd_storage_if.c ****  //printf("%s : %d\r\n",__FUNCTION__,__LINE__);
 215:Src/usbd_storage_if.c ****   return (USBD_OK);
  91              		.loc 1 215 3 view .LVU16
 216:Src/usbd_storage_if.c ****   /* USER CODE END 4 */
 217:Src/usbd_storage_if.c **** }
  92              		.loc 1 217 1 is_stmt 0 view .LVU17
  93 0000 0020     		movs	r0, #0
  94              	.LVL5:
  95              		.loc 1 217 1 view .LVU18
  96 0002 7047     		bx	lr
  97              		.cfi_endproc
  98              	.LFE136:
 100              		.section	.text.STORAGE_IsWriteProtected_FS,"ax",%progbits
 101              		.align	1
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 106              	STORAGE_IsWriteProtected_FS:
 107              	.LVL6:
 108              	.LFB137:
 218:Src/usbd_storage_if.c **** 
 219:Src/usbd_storage_if.c **** /**
 220:Src/usbd_storage_if.c ****   * @brief  Checks whether the medium is write protected.
 221:Src/usbd_storage_if.c ****   * @param  lun: Logical unit number.
 222:Src/usbd_storage_if.c ****   * @retval USBD_OK if all operations are OK else USBD_FAIL
 223:Src/usbd_storage_if.c ****   */
 224:Src/usbd_storage_if.c **** int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
 225:Src/usbd_storage_if.c **** {
 109              		.loc 1 225 1 is_stmt 1 view -0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              		@ link register save eliminated.
 226:Src/usbd_storage_if.c ****   /* USER CODE BEGIN 5 */
 227:Src/usbd_storage_if.c ****   UNUSED(lun);
 114              		.loc 1 227 3 view .LVU20
 228:Src/usbd_storage_if.c ****  //printf("%s : %d\r\n",__FUNCTION__,__LINE__);
 229:Src/usbd_storage_if.c ****   return (USBD_OK);
 115              		.loc 1 229 3 view .LVU21
 230:Src/usbd_storage_if.c ****   /* USER CODE END 5 */
 231:Src/usbd_storage_if.c **** }
 116              		.loc 1 231 1 is_stmt 0 view .LVU22
 117 0000 0020     		movs	r0, #0
 118              	.LVL7:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s 			page 7


 119              		.loc 1 231 1 view .LVU23
 120 0002 7047     		bx	lr
 121              		.cfi_endproc
 122              	.LFE137:
 124              		.section	.text.STORAGE_Read_FS,"ax",%progbits
 125              		.align	1
 126              		.syntax unified
 127              		.thumb
 128              		.thumb_func
 130              	STORAGE_Read_FS:
 131              	.LVL8:
 132              	.LFB138:
 232:Src/usbd_storage_if.c **** 
 233:Src/usbd_storage_if.c **** /**
 234:Src/usbd_storage_if.c ****   * @brief  Reads data from the medium.
 235:Src/usbd_storage_if.c ****   * @param  lun: Logical unit number.
 236:Src/usbd_storage_if.c ****   * @param  buf: data buffer.
 237:Src/usbd_storage_if.c ****   * @param  blk_addr: Logical block address.
 238:Src/usbd_storage_if.c ****   * @param  blk_len: Blocks number.
 239:Src/usbd_storage_if.c ****   * @retval USBD_OK if all operations are OK else USBD_FAIL
 240:Src/usbd_storage_if.c ****   */
 241:Src/usbd_storage_if.c **** int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
 242:Src/usbd_storage_if.c **** {
 133              		.loc 1 242 1 is_stmt 1 view -0
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 0
 136              		@ frame_needed = 0, uses_anonymous_args = 0
 137              		@ link register save eliminated.
 243:Src/usbd_storage_if.c ****   /* USER CODE BEGIN 6 */
 244:Src/usbd_storage_if.c ****   UNUSED(lun);
 138              		.loc 1 244 3 view .LVU25
 245:Src/usbd_storage_if.c ****   UNUSED(buf);
 139              		.loc 1 245 3 view .LVU26
 246:Src/usbd_storage_if.c ****   UNUSED(blk_addr);
 140              		.loc 1 246 3 view .LVU27
 247:Src/usbd_storage_if.c ****   UNUSED(blk_len);
 141              		.loc 1 247 3 view .LVU28
 248:Src/usbd_storage_if.c ****  //printf("%s : %d\r\n",__FUNCTION__,__LINE__);
 249:Src/usbd_storage_if.c ****   return (USBD_OK);
 142              		.loc 1 249 3 view .LVU29
 250:Src/usbd_storage_if.c ****   /* USER CODE END 6 */
 251:Src/usbd_storage_if.c **** }
 143              		.loc 1 251 1 is_stmt 0 view .LVU30
 144 0000 0020     		movs	r0, #0
 145              	.LVL9:
 146              		.loc 1 251 1 view .LVU31
 147 0002 7047     		bx	lr
 148              		.cfi_endproc
 149              	.LFE138:
 151              		.section	.text.STORAGE_Write_FS,"ax",%progbits
 152              		.align	1
 153              		.syntax unified
 154              		.thumb
 155              		.thumb_func
 157              	STORAGE_Write_FS:
 158              	.LVL10:
 159              	.LFB139:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s 			page 8


 252:Src/usbd_storage_if.c **** 
 253:Src/usbd_storage_if.c **** /**
 254:Src/usbd_storage_if.c ****   * @brief  Writes data into the medium.
 255:Src/usbd_storage_if.c ****   * @param  lun: Logical unit number.
 256:Src/usbd_storage_if.c ****   * @param  buf: data buffer.
 257:Src/usbd_storage_if.c ****   * @param  blk_addr: Logical block address.
 258:Src/usbd_storage_if.c ****   * @param  blk_len: Blocks number.
 259:Src/usbd_storage_if.c ****   * @retval USBD_OK if all operations are OK else USBD_FAIL
 260:Src/usbd_storage_if.c ****   */
 261:Src/usbd_storage_if.c **** int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
 262:Src/usbd_storage_if.c **** {
 160              		.loc 1 262 1 is_stmt 1 view -0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              		@ link register save eliminated.
 263:Src/usbd_storage_if.c ****   /* USER CODE BEGIN 7 */
 264:Src/usbd_storage_if.c ****   UNUSED(lun);
 165              		.loc 1 264 3 view .LVU33
 265:Src/usbd_storage_if.c ****   UNUSED(buf);
 166              		.loc 1 265 3 view .LVU34
 266:Src/usbd_storage_if.c ****   UNUSED(blk_addr);
 167              		.loc 1 266 3 view .LVU35
 267:Src/usbd_storage_if.c ****   UNUSED(blk_len);
 168              		.loc 1 267 3 view .LVU36
 268:Src/usbd_storage_if.c ****   // printf("%s : %d\r\n",__FUNCTION__,__LINE__);
 269:Src/usbd_storage_if.c ****   return (USBD_OK);
 169              		.loc 1 269 3 view .LVU37
 270:Src/usbd_storage_if.c ****   /* USER CODE END 7 */
 271:Src/usbd_storage_if.c **** }
 170              		.loc 1 271 1 is_stmt 0 view .LVU38
 171 0000 0020     		movs	r0, #0
 172              	.LVL11:
 173              		.loc 1 271 1 view .LVU39
 174 0002 7047     		bx	lr
 175              		.cfi_endproc
 176              	.LFE139:
 178              		.section	.text.STORAGE_GetMaxLun_FS,"ax",%progbits
 179              		.align	1
 180              		.syntax unified
 181              		.thumb
 182              		.thumb_func
 184              	STORAGE_GetMaxLun_FS:
 185              	.LFB140:
 272:Src/usbd_storage_if.c **** 
 273:Src/usbd_storage_if.c **** /**
 274:Src/usbd_storage_if.c ****   * @brief  Returns the Max Supported LUNs.
 275:Src/usbd_storage_if.c ****   * @param  None
 276:Src/usbd_storage_if.c ****   * @retval Lun(s) number.
 277:Src/usbd_storage_if.c ****   */
 278:Src/usbd_storage_if.c **** int8_t STORAGE_GetMaxLun_FS(void)
 279:Src/usbd_storage_if.c **** {
 186              		.loc 1 279 1 is_stmt 1 view -0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              		@ link register save eliminated.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s 			page 9


 280:Src/usbd_storage_if.c ****   /* USER CODE BEGIN 8 */
 281:Src/usbd_storage_if.c ****   //printf("%s : %d\r\n",__FUNCTION__,__LINE__);
 282:Src/usbd_storage_if.c ****   return (STORAGE_LUN_NBR - 1);
 191              		.loc 1 282 3 view .LVU41
 283:Src/usbd_storage_if.c ****   /* USER CODE END 8 */
 284:Src/usbd_storage_if.c **** }
 192              		.loc 1 284 1 is_stmt 0 view .LVU42
 193 0000 0020     		movs	r0, #0
 194 0002 7047     		bx	lr
 195              		.cfi_endproc
 196              	.LFE140:
 198              		.global	USBD_Storage_Interface_fops_FS
 199              		.global	STORAGE_Inquirydata_FS
 200              		.section	.data.USBD_Storage_Interface_fops_FS,"aw"
 201              		.align	2
 204              	USBD_Storage_Interface_fops_FS:
 205 0000 00000000 		.word	STORAGE_Init_FS
 206 0004 00000000 		.word	STORAGE_GetCapacity_FS
 207 0008 00000000 		.word	STORAGE_IsReady_FS
 208 000c 00000000 		.word	STORAGE_IsWriteProtected_FS
 209 0010 00000000 		.word	STORAGE_Read_FS
 210 0014 00000000 		.word	STORAGE_Write_FS
 211 0018 00000000 		.word	STORAGE_GetMaxLun_FS
 212 001c 00000000 		.word	STORAGE_Inquirydata_FS
 213              		.section	.rodata.STORAGE_Inquirydata_FS,"a"
 214              		.align	2
 217              	STORAGE_Inquirydata_FS:
 218 0000 00800202 		.ascii	"\000\200\002\002\037\000\000\000STM     Product    "
 218      1F000000 
 218      53544D20 
 218      20202020 
 218      50726F64 
 219 001b 20202020 		.ascii	"     0.01"
 219      20302E30 
 219      31
 220              		.text
 221              	.Letext0:
 222              		.file 2 "e:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 223              		.file 3 "e:\\program files (x86)\\gnu arm embedded toolchain\\10 2021.10\\arm-none-eabi\\include\\
 224              		.file 4 "Middlewares/ST/STM32_USB_Device_Library/Class/MSC/Inc/usbd_msc.h"
 225              		.file 5 "Inc/usbd_storage_if.h"
 226              		.file 6 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s 			page 10


DEFINED SYMBOLS
                            *ABS*:00000000 usbd_storage_if.c
C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s:20     .text.STORAGE_Init_FS:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s:25     .text.STORAGE_Init_FS:00000000 STORAGE_Init_FS
C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s:45     .text.STORAGE_GetCapacity_FS:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s:50     .text.STORAGE_GetCapacity_FS:00000000 STORAGE_GetCapacity_FS
C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s:77     .text.STORAGE_IsReady_FS:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s:82     .text.STORAGE_IsReady_FS:00000000 STORAGE_IsReady_FS
C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s:101    .text.STORAGE_IsWriteProtected_FS:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s:106    .text.STORAGE_IsWriteProtected_FS:00000000 STORAGE_IsWriteProtected_FS
C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s:125    .text.STORAGE_Read_FS:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s:130    .text.STORAGE_Read_FS:00000000 STORAGE_Read_FS
C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s:152    .text.STORAGE_Write_FS:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s:157    .text.STORAGE_Write_FS:00000000 STORAGE_Write_FS
C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s:179    .text.STORAGE_GetMaxLun_FS:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s:184    .text.STORAGE_GetMaxLun_FS:00000000 STORAGE_GetMaxLun_FS
C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s:204    .data.USBD_Storage_Interface_fops_FS:00000000 USBD_Storage_Interface_fops_FS
C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s:217    .rodata.STORAGE_Inquirydata_FS:00000000 STORAGE_Inquirydata_FS
C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s:201    .data.USBD_Storage_Interface_fops_FS:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccAUtdgF.s:214    .rodata.STORAGE_Inquirydata_FS:00000000 $d

NO UNDEFINED SYMBOLS
